import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar
import com.vanniktech.maven.publish.SonatypeHost

import java.text.SimpleDateFormat

plugins {
    id "java-library"
    id "org.jetbrains.kotlin.jvm"
    id "com.vanniktech.maven.publish"
}

apply from: "../ext.gradle"

def rootConfig = rootProject.ext
def libVersion = rootConfig.lib

group rootConfig.group
version rootConfig.spring.version

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation "org.springframework:spring-core:${libVersion.spring}"
    implementation "org.springframework:spring-context:${libVersion.spring}"
    implementation "org.springframework:spring-beans:${libVersion.spring}"

    api project(":pigeon")

    implementation "org.slf4j:slf4j-api:${libVersion.slf4j}"

    compileOnly "org.projectlombok:lombok:${libVersion.lombok}"
    annotationProcessor "org.projectlombok:lombok:${libVersion.lombok}"

    testImplementation platform("org.junit:junit-bom:${libVersion.junit}")
    testImplementation "org.junit.jupiter:junit-jupiter"
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.warnings = false
    options.deprecation = true
    options.compilerArgs += ["-parameters"]
}

tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

// https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#packaging-executable.and-plain-archives
jar {
    enabled true
    archiveClassifier = ''
    afterEvaluate {
        manifest {
            attributes 'Implementation-Version': archiveVersion
            attributes 'Built-Gradle': gradle.gradleVersion
            attributes 'Bundle-DocURL': 'https://github.com/yhyzgn/'
            attributes 'Build-OS': System.getProperty("os.name")
            attributes 'Built-By': System.getProperty("user.name")
            attributes 'Build-Jdk': System.getProperty("java.version")
            attributes 'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())
        }
    }
}

javadoc {
    description = "生成jar格式的javadoc。"
    // 只显示 protected 和 public 的类和成员
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author = true
    options.version = true
    options.header = project.name
    // 静默javadoc检查（比如不支持@date会报错等），jdk 8+
    options.addStringOption('Xdoclint:none', '-quiet')
    // 防止本地打开中文乱码
    options.addStringOption("charset", "UTF-8")
    // suppress warnings due to cross-module @see and @link references;
    // note that global 'api' task does display all warnings.
    logging.captureStandardError LogLevel.INFO
    // suppress "## warnings" message
    logging.captureStandardOutput LogLevel.INFO
    // 编码一定要配置否则直接出错
    options.encoding = "UTF-8"
    options.charSet = "UTF-8"
    // java9+
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    // java8
    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc).tap {
            configureEach {
                // disable the crazy super-strict doclint tool in Java 8
                // noinspection SpellCheckingInspection
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}

tasks.register('sourceJar', Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

mavenPublishing {
    configure(new JavaLibrary(new JavadocJar.Javadoc(), true))
    // or when publishing to https://central.sonatype.com/
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)

    signAllPublications()

    coordinates("${group}", "${project.name}", "${version}")

    pom {
        name = "${project.name}"
        description = "Http client based on OkHttp and Jackson."
        inceptionYear = "2020"
        url = "https://github.com/yhyzgn/pigeon/"
        licenses {
            license {
                name = "The Apache License, Version 2.0"
                url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution = "http://www.apache.org/licenses/LICENSE-2.0.txt"
            }
        }
        developers {
            developer {
                id = "yhyzgn"
                name = "yhyzgn"
                url = "https://github.com/yhyzgn/"
            }
        }
        scm {
            url = "https://github.com/yhyzgn/pigeon/"
            connection = "scm:git:git://github.com/yhyzgn/pigeon.git"
            developerConnection = "scm:git:ssh://git@github.com/yhyzgn/pigeon.git"
        }
    }
}